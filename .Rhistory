if(!is.null(dev.list())) dev.off()
rm(list = ls())
load("Housing.RData")
options(contrasts=c("contr.treatment","contr.treatment"))
summary(df)
df$f.chas<-factor(df$chas,labels=c("Otherwise","River"))
# WHAT WE HAVE TO DO IS TO PUT TO THOSE VALUES A NA VALUE, AND THEN IMPUTE SOME VALUES FOR THAT MISSING ONE'S.
df$medv[-which(df$medv == 50)]
summary(df)
# WHAT WE HAVE TO DO IS TO PUT TO THOSE VALUES A NA VALUE, AND THEN IMPUTE SOME VALUES FOR THAT MISSING ONE'S.
indx <- which(df$medv == 50)
df$medv[-indx]
df$medv[-indx]
indx
df[-indx]
df[-indx, ]
prop.table(table(df$f.chas))
# Point 1
summary(df$medv)
ll<-which(df$medv==50);length(ll)
df<-df[-ll,]
df <- df[-indx, ]
df <- df[-indx, ]
rm(list=ls())
library(car)
library(FactoMineR)
library(missMDA)
library(chemometrics)
if(!is.null(dev.list())) dev.off()
rm(list = ls())
load("Housing.RData")
options(contrasts=c("contr.treatment","contr.treatment"))
summary(df)
df$f.chas<-factor(df$chas,labels=c("Otherwise","River"))
# WHAT WE HAVE TO DO IS TO PUT TO THOSE VALUES A NA VALUE, AND THEN IMPUTE SOME VALUES FOR THAT MISSING ONE'S.
indx <- which(df$medv == 50)
df <- df[-indx, ]
prop.table(table(df$f.chas))
# in that case we will have to do a proportion test, so let's se how it works the proportion test to see how it works.
table(df$f.chas)
library(car)
library(FactoMineR)
library(factoextra)
library(missMDA)
if(!is.null(dev.list())) dev.off()
## null device
## 1
rm(list = ls())
load("Housing.RData")
names(df)
options(contrasts=c("contr.treatment","contr.treatment"))
df$f.chas<-factor(df$chas,labels=c("Otherwise","River"))
# Point 1
summary(df$medv)
ll<-which(df$medv==50);length(ll)
df<-df[-ll,]
prop.table(table(df$f.chas))
tapply(df$ptratio,df$chas,summary)
library(car)
library(FactoMineR)
library(factoextra)
library(missMDA)
if(!is.null(dev.list())) dev.off()
## null device
## 1
rm(list = ls())
load("Housing.RData")
names(df)
options(contrasts=c("contr.treatment","contr.treatment"))
df$f.chas<-factor(df$chas,labels=c("Otherwise","River"))
# Point 1
summary(df$medv)
ll<-which(df$medv==50);length(ll)
df<-df[-ll,]
par(mfrow=c(1,2))
ss<-summary(df$rm);ss
# Upper/lower severe threshold
utso2<-ss[5]+3*(ss[5]-ss[2]);utso2
utsi2<-ss[2]-3*(ss[5]-ss[2]);utsi2
# Upper/lower mild threshold
utmo2<-ss[5]+1.5*(ss[5]-ss[2]);utmo2
utmi2<-ss[2]-1.5*(ss[5]-ss[2]);utmi2
Boxplot(df$rm,id=list(n=Inf,labels=row.names(df)))
Boxplot(df$rm)
abline(h=utso2,col="red",lwd=3)
abline(h=utsi2,col="red",lwd=3)
abline(h=utmo2,col="green",lwd=3)
abline(h=utmi2,col="green",lwd=3)
Boxplot(df$rm~df$chas,id=list(n=Inf,labels=row.names(df)),col=heat.colors(2))
abline(h=utso2,col="red",lwd=3)
abline(h=utsi2,col="red",lwd=3)
abline(h=utmo2,col="green",lwd=3)
abline(h=utmi2,col="green",lwd=3)
df[c("365","366"),]
lls<-which((df$rm>utso2)|(df$rm<utsi2));lls
df[lls,]
llm<-which((df$rm>utmo2)|(df$rm<utmi2));llm
par(mfrow=c(1,1))
df[c(354,355),"rm"]<-NA
imres<-imputePCA(df[c(1:3,5:14)])
names(imres)
imres$completeObs[c(354,355),"rm"] #6.049816 6.049368
par(mfrow=c(1,2))
Boxplot(imres$completeObs[,"rm"])
Boxplot(df$rm)
df<-df[-c(354,355),]
names(df)
cor(df[c(14,6,13,11)])
names(df)
res.cat <- catdes(df,num.var=16)
res.cat$quanti.var
res.cat$quanti
tapply(df$ptratio,df$chas,summary)
Boxplot(df$ptratio~df$chas, col=rainbow(2))
tapply(df$medv, df$f.hcla, sd)
tapply(df$medv, df$f.hcla, var)
varTest(df$medv[ll],conf.level=0.99,alternative="less")
89*47.65549/qchisq(0.01,89)
varTest(df$medv[ll],conf.level=0.99)
89*47.65549/qchisq(0.005,89)
ll3 <- which(df$f.hcla=="3");length(ll3)
t.test(df$medv[ll],df$medv[ll3],conf.level=0.99, var.equal=F,paired=F)
ll<-which(df$f.hcla =="1");length(ll)
ll3 <- which(df$f.hcla=="3");length(ll3)
t.test(df$medv[ll],df$medv[ll3],conf.level=0.99, var.equal=F,paired=F)
idx1 <- which(df$f.hcla == 1)
idx3 <- which(df$f.hcla == 3)
gr1 <- df[idx1,]
gr3 <- df[idx3,]
t.test(gr1$medv, gr3$medv, alternative="two.sided", conf.level = 0.99)
setwd("~/Desktop/SIM/PROJECTE/Assignment Description and Data-20251008")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
```{r}
df <- read.csv("RealEstate_Georgia.csv")
View(df)
View(df)
summary(df$stateId)
which(df$stateId != "16")
df <- subset(df, select = -stateId)
View(df)
table(df$countyId)
which(table(df$countyId) > 1)
table(df$countyId)
which(table(df$countyId) > 1)
which(table(df$countyId) > 2)
which(table(df$countyId) > 1)
which(talbe(df$countyId) > 2)
which(talbe(df$countyId) > 2)
which(table(df$countyId) > 2)
df$datePostedString <- as.Date(df$datePostedString, format = "%Y-%m-%d")
df$datePostedString <- as.numeric(format(df$datePostedString, "%Y"))
which(df$datePostedString != 2021)
size_out_of_year <- which(df$datePostedString != 2021); length(size_out_of_year)
df <- df[df$datePostedString == 2021,]
df <- df[df$datePostedString == 2021,]
str(df)
df$datePostedString <- as.Date(df$datePostedString, format = "%Y-%m-%d")
df$datePostedString <- as.numeric(format(df$datePostedString, "%Y"))
length(df[which(df$datePostedString == 2021),]$datePostedString)
df$stateId <- as.factor(df$stateId)
str(df$is_bankOwned)
which(df$value > 2)
which(df$value > 1)
sum(is.na(df$is_bankOwned))
which(df$value > 1 | df$value < 0) # SO THAT MEANS, AS WE CAN SEE IN THE PREVIEW, THAT THIS VARIABLE IS NUMERIC BUT CAN BE CONSIDERED AS                       CATEGORICAL, AND WE THINK THAT IS THE BEST OPTION, TO CONSIDER AS A CATEGORICAL VARIABLE.
?factor
which(df$value == 1)
which(df$value != 0)
df <- subset(df, select = -is_bankOwned)
View(df)
str(df$is_forAuction)
rm(list=ls())
df <- read.csv("RealEstate_Georgia.csv")
View(df)
summary(df$stateId)
which(df$stateId != "16")
df <- subset(df, select = -stateId)
table(df$countyId)
df$coun
which(table(df$countyId) > 1)
which(table(df$countyId) > 2)
which(df$country != "USA")
df <- subset(df, select = -country)
df$datePostedString <- as.Date(df$datePostedString, format = "%Y-%m-%d")
df$datePostedString <- as.numeric(format(df$datePostedString, "%Y"))
size_out_of_year <- which(df$datePostedString != 2021); length(size_out_of_year)
df <- df[df$datePostedString == 2021,]
str(df$is_bankOwned)
which(df$is_bankOwned > 1 | df$is_bankOwned < 0)
which(df$is_bankOwned == 1) # So IN THAT CASE WE DON'T NEED THE IS_BANK_OWNED, BECAUSE ALL VALUES ARE 0
which(df$value != 0) # We have 0 values different from the 0, so all of them are not owned by tje bank, we can remove that                       variable.
which(df$value != 0) # We have 0 values different from the 0, so all of them are not owned by tje bank, we can remove that                       variable.
which(df$is_bankOwned != 0) # We have 0 values different from the 0, so all of them are not owned by tje bank, we can remove that                       variable.
df$is_bankOwned <- factor(df$is_bankOwned, labels = c("NO", "YES"))
str(df$is_forAuction)
which(df$is_forAuction != 0)
which(df$is_forAuction < 0 | df$is_forAuction > 1)
which(df$is_forAuction != 0)
df$is_forAuction <- factor(df$is_forAuction, labels = c("NO", "YES"))
View(df)
str(df$event)
table(df$event)
sum(is.na(df$event))
str(df$event)
df$event <- as.factor(df$event)
df <- subset(df, select = -time)
str(df$price)
sum(is.na(df$price))
hist(df$price)
hist(df$price)
qqnorm(df$price)
qqline(df$price)
shapiro.test(df$price)
hist(log(df$price))
qqnorm(log(df$price))
qqline(log(df$price))
hist(df$price)
qqnorm(df$price)
qqline(df$price)
# IN THAT CASE WE CAN'T SAY THAT IS NORMALLY DISTRIBUITED, BUT LET'S SEE IF WITH THE SHAPIRO.TEST THE RESULT IS THE SAME OR NOT.
shapiro.test(df$price) # Problema, tenim massses!!!!!!!!!!!
hist(df$price)
qqnorm(df$price)
qqline(df$price)
# IN THAT CASE WE CAN'T SAY THAT IS NORMALLY DISTRIBUITED, BUT LET'S SEE IF WITH THE SHAPIRO.TEST THE RESULT IS THE SAME OR NOT.
#shapiro.test(df$price) # Problema, tenim massses!!!!!!!!!!!
"LET'S CHECK APPLAYING THE LOGARITMIC TRANSFORMATION"
hist(log(df$price))
qqnorm(log(df$price))
qqline(log(df$price))
View(df)
summary(df$pricePerSquareFoot)
boxplot(df$pricePerSquareFoot)
sum_sq <- summary(df$pricePerSquareFoot)
boxplot(df$pricePerSquareFoot)
iqr <- sum_sq[5] - sum_sq[2]
llmild <- which(df$price < sum_sq[2] - 1.5*iqr | df$pricePerSquareFoot > sum_sq[5] + 1.5*iqr)
llsev <- which(df$price < sum_sq[2] - 3*iqr | df$pricePerSquareFoot > sum_sq[5] + 3*iqr)
length(llmild); length(llsev)
boxplot(df$pricePerSquareFoot)
abline(h = sum_sq[2] - 1.5*iqr, col='green')
abline(h = sum_sq[5] + 1.5*iqr, col='green')
abline(sum_sq[2] - 3*iqr, col='red')
boxplot(df$pricePerSquareFoot)
abline(h = sum_sq[2] - 1.5*iqr, col='green')
abline(h = sum_sq[5] + 1.5*iqr, col='green')
abline(h=sum_sq[2] - 3*iqr, col='red')
abline(h=sum_sq[5] - 3*iqr, col='red')
boxplot(df$price)
sum_sq <- summary(df$price)
iqr <- sum_sq[5] - sum_sq[2]
llmild <- which(df$price < sum_sq[2] - 1.5*iqr | df$pricePerSquareFoot > sum_sq[5] + 1.5*iqr)
llsev <- which(df$price < sum_sq[2] - 3*iqr | df$pricePerSquareFoot > sum_sq[5] + 3*iqr)
length(llmild); length(llsev)
# SO IN THAT CASE WE HAVE TWO OUTLAYERS, LET'S SEE THAT OUTLAYERS
boxplot(df$pricePerSquareFoot)
abline(h = sum_sq[2] - 1.5*iqr, col='green')
abline(h = sum_sq[5] + 1.5*iqr, col='green')
abline(h=sum_sq[2] - 3*iqr, col='red')
abline(h=sum_sq[5] - 3*iqr, col='red')
sum_sq <- summary(df$price)
iqr <- sum_sq[5] - sum_sq[2]
llmild <- which(df$price < sum_sq[2] - 1.5*iqr | df$price > sum_sq[5] + 1.5*iqr)
llsev <- which(df$price < sum_sq[2] - 3*iqr | df$price > sum_sq[5] + 3*iqr)
length(llmild); length(llsev)
# SO IN THAT CASE WE HAVE TWO OUTLAYERS, LET'S SEE THAT OUTLAYERS
boxplot(df$price)
abline(h = sum_sq[2] - 1.5*iqr, col='green')
abline(h = sum_sq[5] + 1.5*iqr, col='green')
abline(h=sum_sq[2] - 3*iqr, col='red')
abline(h=sum_sq[5] - 3*iqr, col='red')
sum_sq <- summary(df$price)
iqr <- sum_sq[5] - sum_sq[2]
llmild <- which(df$price < sum_sq[2] - 1.5*iqr | df$price > sum_sq[5] + 1.5*iqr)
llsev <- which(df$price < sum_sq[2] - 3*iqr | df$price > sum_sq[5] + 3*iqr)
length(llmild); length(llsev)
boxplot(df$price)
abline(h = sum_sq[2] - 1.5*iqr, col='green')
boxplot(df$price)
abline(h = sum_sq[2] - 1.5*iqr, col='green')
boxplot(df$price)
abline(h = sum_sq[2] - 1.5*iqr, col='green')
abline(h = sum_sq[5] + 1.5*iqr, col='green')
abline(h = sum_sq[2] - 3*iqr, col='red')
abline(h = sum_sq[5] - 3*iqr, col='red')
abline(h = sum_sq[2] - 3*iqr, col='red')
boxplot(df$price)
#abline(h = sum_sq[2] - 1.5*iqr, col='green')
#abline(h = sum_sq[5] + 1.5*iqr, col='green')
abline(h = sum_sq[2] - 3*iqr, col='red')
abline(h = sum_sq[5] - 3*iqr, col='red')
boxplot(df$price)
abline(h = sum_sq[2] - 1.5*iqr, col='green')
abline(h = sum_sq[5] + 1.5*iqr, col='green')
abline(h = sum_sq[2] - 3*iqr, col='red')
abline(h = sum_sq[5] + 3*iqr, col='red')
df_copy <- df
df_copy$isout <- df_copy[c(llmild, llsev),]
df_copy$isout <- 0
df_copy$isout[c(llmild, llsev)] <- 1
df_copy$isout[c(llmild, llsev)] <- 1
View(df_Copy)
View(df_copy)
df_copy$isout <- factor(df_copy$isout, labels = c("NO", "YES"))
res.ct <- catdes(df_copy, 37)
res.ct$quanti.var
res.ct$category
res.ct$quanti
res.ct <- catdes(df_copy[,c(4:8, 10,12,14,22,24,25,27,31,32,33,36)], 37)
res.ct <- catdes(df_copy[,c(4:8,10,12,14,22,24,25,27,31,32,33,36)], num.var = 37)
?catdes
res.ct <- catdes(df_copy[,c(4:8,10,12,14,22,24,25,27,31,32,33,36)], num.var = 37)
res.ct$quanti.var
res.ct <- catdes(df_copy[,c(4:8,10,12,14,22,24,25,27,31,32,33,36)], num.var = 37)
res.ct$quanti.var
res.ct <- catdes(df_copy[,c(4:8,10,12,14,22,24,25,27,31,32,33,36)], num.var = "isout")
df_copy$isout <- factor(df_copy$isout, labels = c("NO", "YES"))
res.ct <- catdes(df_copy[,c(4:8,10,12,14,22,24,25,27,31,32,33,36)], num.var = "isout")
res.ct <- catdes(df_copy[,c(4:8,10,12,14,22,24,25,27,31,32,33,36:37)], num.var = "isout")
res.ct <- catdes(df_copy[,c(4:8,10,12,14,22,24,25,27,31,32,33,36:37)], 37)
res.ct <- catdes(df_copy[,c(4:8,10,12,14,22,24,25,27,31,32,33,36,37)], 37)
res.ct <- catdes(df_copy[, c(4:8,10,12,14,22,24,25,27,31,32,33,36, "isout")],
num.var = "isout")
str(df_copy)
res.ct <- catdes(df_copy[, c(4:8,37)],
num.var = "isout")
res.ct <- catdes(df_copy[c(4:8,37)],
num.var = "isout")
res.ct <- catdes(df_copy[,c(4:8,37)],
num.var = "isout")
res.ct <- catdes(df_copy[,c(4:8)],
num.var = "isout")
res.ct <- catdes(df_copy[,], 37)
res.ct <- catdes(df_copy[,c(4:8)], 37)
res.ct <- catdes(df_copy[,c(5:8)], 37)
res.ct <- catdes(df_copy[,c(5:7)], 37)
res.ct <- catdes(df_copy[,c(5:6)], 37)
res.ct <- catdes(df_copy[,c(5:6)], 37)
var_col <- c(4:8,10,12,14,22,24,25,27,31,32,33,36,37); var_col
res.ct <- catdes(df_copy[,],
num.var = 37)
res.ct <- catdes(df_copy[,var_col],
num.var = 37)
df_copy
df_copy[,1]
df_copy[,c(4:8)]
df_copy[,var_col]
df_cat_res <- df_copy[,var_col]
df_cat_res <- df_copy[,var_col]; df_cat_res
res.ct <- catdes(df_cat_res,
num.var = 17)
res.ct$quanti.var
res.ct$category
res.ct$quanti
table(df$city)
table(df$city)
prop.table(table(df$city))
sum(is.na(df$city))
which(df$state != "GA")
df <- subset(df, select = -"state")
df <- subset(df, select -= "state")
df <- subset(df, select = -state)
summary(df$yearBuilt)
boxplot(df$yearBuilt)
df <- subset(df, select = -streetAddress)
df <- subset(df, select= -c(zipcode, latitude, longitude))
which(df$hasBadGeocode != 0)
df <- subset(df, select = -hasBadGeocode)
which(df$currency != 'USA')
which(df$currency != 'USD')
which(df$currency != 'USD')
df <- subset(df, select = -currency)
df <- subset(df, select = -livingArea)
df <- subset(df, select = -buildingArea)
summary(df$bathrooms)
boxplot(df$bathrooms)
llm <- which(df$bathrooms < var_out[2] - 1.5*iqr | df$bathrooms > var_out[5] + 1.5*iqr); llm
var_out <- summary(df$bathrooms)
boxplot(df$bathrooms)
iqr <- var_out[5] - var_out[2]
llm <- which(df$bathrooms < var_out[2] - 1.5*iqr | df$bathrooms > var_out[5] + 1.5*iqr); llm
llm <- which(df$bathrooms < var_out[2] - 1.5*iqr | df$bathrooms > var_out[5] + 1.5*iqr); length(llm)
lls <- which(df$bathrooms < var_out[2] - 3*iqr | df$bathrooms > var_out[5] + 3*iqr); length(lls)
boxplot(df$bathrooms)
abline(h= var_out[2] - 1.5*iqr, col= 'green')
abline(h= var_out[5] + 1.5*iqr, col= 'green')
abline(h= var_out[2] - 3*iqr, col= 'red')
abline(h= var_out[2] + 3*iqr, col='red')
# tenim un total de
length(llm + lls)
# tenim un total de
length(llm + lls)
llm <- which(df$bathrooms < var_out[2] - 1.5*iqr | df$bathrooms > var_out[5] + 1.5*iqr); length(llm)
# tenim un total de
length(llm) + length(lls)
var_out <- summary(df$bedrooms)
boxplot(df$bedrooms)
iqr <- var_out[5] - var_out[2]
llm <- which(df$bedrooms < var_out[2] - 1.5*iqr | df$bedrooms > var_out[5] + 1.5*iqr); length(llm)
lls <- which(df$bedrooms < var_out[2] - 3*iqr | df$bedrooms > var_out[5] + 3*iqr); length(lls)
boxplot(df$bedrooms)
abline(h= var_out[2] - 1.5*iqr, col= 'green')
abline(h= var_out[5] + 1.5*iqr, col= 'green')
abline(h= var_out[2] - 3*iqr, col= 'red')
abline(h= var_out[2] + 3*iqr, col='red')
# tenim un total de
length(llm) + length(lls)
table(df$levels)
summary(df$levels)
table(df$levels)
prop.table(table(df$levels))
table(df$levels)
prop.table(table(df$levels))
sum(is.na(df$levels))
str(df$pool)
which(df$pool < 0 | df$pool > 1)
df$pool <- factor(df$pool, labels = c("NO", "YES"))
str(df$spa)
which(df$spa < 0 & df$spa > 1)
df$spa <- factor(df$spa, labels = c("NO", "YES"))
str(df$isNewConstruction)
which(df$isNewConstruction < 0 | df$isNewConstruction > 1)
df$isNewConstruction <- factor(df$isNewConstruction, c("NO", "YES"))
str(df$hasPetsAllowed)
which(df$hasPetsAllowed < 0 | df$hasPetsAllowed > 1)
which(df$hasPetsAllowed != 0)
df$hasPetsAllowed <- factor(df$hasPetsAllowed, c("NO", "YES"))
str(df$homeType)
sum(is.na(df$homeType))
str(df$homeType)
df$homeType <- as.factor(as.character(df$homeType))
table(df$homeType)
prop.table(table(df$homeType))
table(df$homeType)
prop.table(table(df$homeType))
str(df$county)
sum(is.na(df$county))
df$county <- as.factor(as.character(df$county))
table(df$county)
prop.table(table(df$county))
?Moutlier
library(chemometrics)
var_col_2 <- c(4:8,10,12,14,22,24,25,27,31,32,33,36,37); var_co_2
var_col_2 <- c(4:8,10,12,14,22,24,25,27,31,32,33,36,37); var_col_2
df_mout <- df_copy[,var_col]; df_mout
res.mout <- Moutlier(df_mout)
df_mout <- df_copy[,var_col]; df_mout
res.mout <- Moutlier(df_mout[,c(1:3,6,8:11)])
df_mout <- df_mout[,c(1:3,6,8:11)]
df_mout
res.mout <- Moutlier(df_mout)
df_mout
df_mout <- df_mout[,c(1:2,6,8:11)]
df_mout <- df_mout[,c(1,6,8:11)]
df_mout
df_mout
df_mout <- df_copy[,var_col]; df_mout
df_mout <- df_copy[,var_col]; df_mout
df_mout <- df_mout[,c(6,8:11)]
df_mout
res.mout <- Moutlier(df_mout)
res.mout <- Moutlier(df_mout)
plot(res.mout$md, res.mout$rd)
abline(h=res.mout$cutoff, col='red')
abline(v=res.mout$cutoff, col='red')
df_copy_2 <- df
df_copy_2 <- df_mout
df_copy_2 <- df_mout
df_copy_2
df_copy_2$mvout <- 0
df_copy_2$mvout[which(res.mout$md > res.mout$cutoff & res.mout$rd > res.mout$cutoff)] <- 1
df_copy_2$mvout <- factor(df_copy_2$mvout, labels = ("MVout-NO", "MVout-yes"))
df_copy_2$mvout <- factor(df_copy_2$mvout, labels = c("MVout-NO", "MVout-yes"))
df_copy_2$mvout <- factor(df_copy_2$mvout, labels = c("MVout-NO", "MVout-yes"))
cat <- catdes(df_copy_2, "mvout")
df_copy_2
cat <- catdes(df_copy_2,6)
cat$quanti.var
cat$quanti
cat$call
cat$quanti
summary(cat)
table(cat)
cat$quanti.var
cat$quanti
max(res.mout)
max(res.mout$md)
max(res.mout$rd)
max(res.mout$md)
max(res.mout$rd)
res.mout
max(res.mout$md)
max(res.mout$rd)
which(max(res.mout$md))
max(res.mout$md)
max(res.mout$rd)
which(res.mout$md == max(res.mout$rd))
which(res.mout$md == max(res.mout$rd))
max(res.mout$rd)
which(res.mout$md > 368.0)
max(res.mout$rd)
max(res.mout$md)
which(res.mout$rd > 368.0)
which(res.mout$rd == max(res.mout$rd))
which(res.mout$rd == max(res.mout$rd))
which(res.mout$rd == max(res.mout$rd))
which(res.mout$md == max(res.mout$md))
df$price[c(2053,2065)]
summary(df$price)
